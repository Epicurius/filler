/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   read_input.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: nneronin <nneronin@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2020/02/26 09:36:44 by nneronin          #+#    #+#             */
/*   Updated: 2020/03/07 15:58:07 by nneronin         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include "fillit.h"
#include "./libft/libft.h"
#include "./libft/get_next_line.h"

void		pic(t_info *game)
{
	int a = 0;
	int b;
	while (a < game->map_y)
	{
		b = 0;
		while (b < game->map_x)
		{
		if (game->map[a][b] >= 0)
		{
			ft_putnbr(game->map[a][b]);
			if (game->map[a][b] < 10)
				ft_putchar(' ');
		}
		else if (game->map[a][b] == -1)
			ft_putstr("O ");
		else if (game->map[a][b] == -2)
			ft_putstr("X ");
		b++;
		}
	a++;
	ft_putchar('\n');
	}
}

int 		print(int y, int x, t_info *game)
{
	ft_putnbr(y);
	ft_putchar(' ');
	ft_putnbr(x);
	ft_putchar('\n');
	return (1);
}

void		map_size(char *line, t_info *game)
{
	int i;

	i = 8;
	game->map_x = 0;
	game->map_y = 0;
	game->map_y += ft_atoi(&line[i]);
	while (line[i] != ' ')
		i++;
	i += 1;
	game->map_x += ft_atoi(&line[i]);
	game->map = (int **)malloc(sizeof(int *) * game->map_y);
}

void		map_malloc(char *line, t_info *game)
{
	int y;
	int x;

	y = -1;
	get_next_line(0, &line);
	ft_strdel(&line);
	while (++y <= (game->map_y - 1))
	{
		x = -1;
		get_next_line(0, &line);
		game->map[y] = (int *)malloc(sizeof(int) * game->map_x);
		while (x++ <= (game->map_x - 1))
		{
			if (line[x + 4] == '.')
				game->map[y][x] = 0;
			else if (line[x + 4] == 'o' || line[x + 4] == 'O')
				game->map[y][x] = -1;
			else if (line[x + 4] == 'x' || line[x + 4] == 'X')
				game->map[y][x] = -2;
		}
		ft_strdel(&line);
	}
}

void		piece_size(char *line, t_info *game)
{
	int i;

	i = 6;
	game->piece_y = 0;
	game->piece_x = 0;
	game->piece_y += ft_atoi(&line[i]);
	while (line[i] != ' ')
		i++;
	i += 1;
	game->piece_x += ft_atoi(&line[i]);
	game->piece = (int **)malloc(sizeof(int *) * game->piece_y);
	i = -1;
	/*
	ft_strdel(&line);
	while (++i <= (game->piece_y - 1))
	{
		get_next_line(0, &line);
		game->piece[i] = ft_strdup(line);
		ft_strdel(&line);
	}*/
}

void		piece_malloc(char *line, t_info *game)
{
	int y;
	int x;

	y = -1;
	get_next_line(0, &line);
	ft_strdel(&line);
	while (++y <= (game->piece_y - 1))
	{
		x = -1;
		get_next_line(0, &line);
		game->piece[y] = (int *)malloc(sizeof(int) * game->piece_x);
		while (x++ <= (game->piece_x - 1))
		{
			if (line[x] == '.')
				game->piece[y][x] = 0;
			else if (line[x] == '*')
				game->piece[y][x] = 1;
		}
		ft_strdel(&line);
	}
}

void		players(t_info *game)
{
	char *line;

	get_next_line(0, &line);
	if (strncmp(line, "$$$ exec", 7) == 0)
	{
		game->my_num = ft_strstr(line, "p1") ? -1 : -2;
	}
	ft_strdel(&line);
}

int		read_input(t_info *game)
{
	char *line;

	while (get_next_line(0, &line) > 0)
	{
		if (ft_strncmp(line, "Plateau", 6) == 0)
		{
			map_size(line, game);
			ft_strdel(&line);
			map_malloc(line, game);
		}
		else if (ft_strncmp(line, "Piece", 4) == 0)
		{
			piece_size(line, game);
			ft_strdel(&line);
			piece_malloc(line, game);
			return (1);
		}
		else
			ft_strdel(&line);
	}
	return (0);
}

int 	is_space(int y, int x, t_info *game)
{
	int a;
	int b;
	int i = 0;
	int combo;
	
	combo = 0;
	a = 0;
	while (game->piece_y > a)
	{
		b = 0;
		while (game->piece_x > b)
		{
			if (game->piece[a][b] == 1)
			{
				combo += game->map[y + a][x + b];
				if (i == 0 && game->map[y + a][x + b] == game->my_num)
					i += 1;
				else if (game->map[y + a][x + b] < 0 || i > 1)
					return (1);
			}
			b++;
		}
		a++;
	}
	if (i == 1 && combo < game->value)
	{
		game->fin[0] = y;
		game->fin[1] = x;
		game->value = combo;
		return (0);
	}
	return (1);
}

int		surround(t_info *game)
{
	int y;
	int x;

	y = 0;
	while (y < game->map_y && (game->piece_y + y) <= game->map_y) //moove
	{
		x = 0;
		while (x < game->map_x && (game->piece_x + x) <= game->map_x)
		{
			is_space(y, x, game);
			x++;
		}
		y++;
	}
	return (0);
}

int	pos(int x)
{
	return ((x < 0) ? (x * -1) : x);
}

int		proximity_calc(int y, int x, t_info *game)
{
	int a;
	int b;
	int value;
	int min_value;

	a = 0;
	min_value = 2147483647;
	while (a < game->map_y)
	{
		b = 0;
		while (b < game->map_x)
		{
			if (game->map[a][b] == (game->my_num == -1 ? -2 : -1))
			{
				value = pos(a - y) + pos(b - x);
				if (value < min_value)
					min_value = value;
			}
			b++;
		}
		a++;
	}
	return (min_value);
}

int		mine_sweap(t_info *game)
{
	int y;
	int x;

	y = 0;
	while (y < game->map_y)
	{
		x = 0;
		while (x < game->map_x)
		{
			if (game->map[y][x] == 0)
				game->map[y][x] = proximity_calc(y, x, game);
			x++;
		}
		y++;
	}	
	return (0);
}

int		main(void)
{
	t_info		*game;
	char		*line;
	
	line = NULL;
	game = (t_info *)malloc(sizeof(*game));
	players(game);
	while (1)
	{
		read_input(game);
		game->value = 2147483647;
		mine_sweap(game);
		surround(game);
		if (game->value == 2147483647)
			exit(1);
		print(game->fin[0], game->fin[1], game);
		free(game->piece);
		//pic(game);
		//for (int a = 0; a < game->piece_y; a++)
		//{
		//	printf("%s\n", game->piece[a]);
		//}
		//printf("%d %d\n", game->fin[0], game->fin[1]);
		//printf("%d\n", game->value);
		//if ((game->contact == 0 ? placement(game) : surround(game)) == 0)
		//	exit(1);
		//empty space in piece can overlap.	
		//if (is_space(game->fin[0], game->fin[1], game) == 1)
		//	surround(game);
		//print(game->fin[0], game->fin[1], game);
		//while (game->piece_y--)
		//	ft_strdel(&game->piece[game->piece_y]);
		//free(game->piece);
		
	}
	return (0);
}

